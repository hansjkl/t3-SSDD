{
    "VALIDATION": "backward",
    "SERVERS": [
        "R1",
        "R2"
    ],
    // Información inicial de la base de datos
    "DATA": {
        "VAR_1": "1", // Aunque sea un int tratamos todo como strings
        "VAR_2": "Hola"
    },
    "TRANSACTIONS": [
        // Consulta 1 - Ver valor consolidado de VAR_1
        "C;READ_COMMIT;VAR_1",

        // Comenzar Transacción 1
        "T1;BEGIN",
        "T1;READ;VAR_2",
        "T1;WRITE;VAR_1,2",
        // Consulta 2 - Ver valores posibles de VAR_1 (1 o 2)
        "C;READ_POSSIBLE_VALUES;VAR_1",

        // Comenzar Transacción 2
        "T2;BEGIN",
        // T1 hace commit y es aceptado
        "T1;CAN_COMMIT;R1",
        "T1;CAN_COMMIT;R2",
        "T1;COMMIT",

        // T2 intenta leer VAR_1, que fue modificado por T1
        "T2;READ;VAR_1",
        "T2;WRITE;VAR_1,4444",
        // Consulta 3 - Ver valores posibles de VAR_1 (2 o 4444)
        // Aunque sabemos que T2 va a ser abortada, igual afecta a la consulta porque
        // todavía no es declarada como abortada o inválida.
        "C;READ_POSSIBLE_VALUES;VAR_1",

        // R1 rechazan T2 porque T1 ya hizo commit y esta escribe en VAR_1 que T2 quiere leer
        // R1 obliga a abortar a T2
        "T2;CAN_COMMIT;R1",

        // Este comando no se ejecuta porque T2 ya fue abortada
        "T2;CAN_COMMIT;R2",
        // Consulta 3 - Ver valores posibles de VAR_1 (2)
        "C;READ_POSSIBLE_VALUES;VAR_1",
        // Este comando no se ejecuta porque T2 ya fue abortada
        "T2;COMMIT",
        // Consulta 4 - Ver valores posibles de VAR_1 (2)
        "C;READ_POSSIBLE_VALUES;VAR_1"
    ]
}